Ejercicio 1: Creaci√≥n de una clase simple
Objetivo:
Crear una clase llamada Persona que tenga los siguientes atributos:

nombre

edad

A√±adir un m√©todo saludar() que imprima un saludo con el nombre de la persona.

Ejercicio 2: M√©todos adicionales
Objetivo:
Crear una clase C√≠rculo que calcule el √°rea y el per√≠metro de un c√≠rculo a partir de su radio.

Instrucciones:
Crear un constructor que tome el radio como par√°metro.

A√±adir dos m√©todos:

calcular_area(): Devuelve el √°rea del c√≠rculo.

calcular_perimetro(): Devuelve el per√≠metro del c√≠rculo.

F√≥rmulas:
√Årea: 
ùê¥
=
ùúã
ùëü
2
A=œÄr 
2
 

Per√≠metro: 
ùëÉ
=
2
ùúã
ùëü
P=2œÄr

Ejercicio 3: Herencia
Objetivo:
Crear una clase Animal y luego una clase hija llamada Perro que herede de Animal.

Instrucciones:
Crear la clase Animal con un m√©todo hacer_sonido() que imprima un mensaje gen√©rico.

Crear una clase Perro que herede de Animal y sobrescriba el m√©todo hacer_sonido() para que imprima algo espec√≠fico para un perro (por ejemplo, "El perro ladra").

Crear una instancia de Perro y llamar al m√©todo hacer_sonido().

Ejercicio 4: Uso de m√©todos est√°ticos y de clase
Objetivo:
Crear una clase llamada CuentaBancaria con m√©todos est√°ticos y de clase.

Instrucciones:
Crear un atributo de clase interes_anual.

A√±adir un m√©todo de clase que permita modificar el valor de interes_anual.

A√±adir un m√©todo est√°tico que calcule el inter√©s anual sobre una cantidad dada.

Ejercicio 5: Encapsulamiento (uso de getters y setters)
Objetivo:
Crear una clase Producto con los atributos nombre y precio, pero el precio debe ser accesible solo a trav√©s de getter y setter.

Instrucciones:
Crear la clase Producto con los atributos nombre y precio.

Utilizar getter y setter para el atributo precio de modo que no se pueda modificar directamente fuera de la clase, sino a trav√©s del setter.

El getter debe devolver el precio y el setter debe asegurarse de que el precio no sea negativo.

Ejercicio 6: Polimorfismo
Objetivo:
Crear una clase Vehiculo y dos clases hijas, Coche y Bicicleta, que implementen un m√©todo com√∫n mover(), pero cada una con un comportamiento diferente.

Instrucciones:
Crear la clase Vehiculo con un m√©todo mover().

Crear una clase hija Coche que sobrescriba mover() con un comportamiento espec√≠fico.

Crear una clase hija Bicicleta que sobrescriba mover() con un comportamiento espec√≠fico.

Llamar al m√©todo mover() para ambas clases.

Ejercicio 7: Clases con listas y diccionarios
Objetivo:
Crear una clase Equipo que contenga una lista de jugadores, y cada jugador tiene un diccionario con su nombre y posici√≥n.

Instrucciones:
Crear la clase Equipo que tenga un atributo de instancia jugadores (una lista).

Crear un m√©todo agregar_jugador(nombre, posicion) que agregue un diccionario con nombre y posicion a la lista de jugadores.

Crear una instancia de Equipo y agregar algunos jugadores.

Mostrar la lista de jugadores del equipo.

Consejos adicionales para practicar:
Reescribe el c√≥digo: Una excelente manera de aprender es escribir el c√≥digo varias veces, cambiando cosas y probando nuevas ideas.

Experimenta con los tipos: Cambia los atributos de las clases, prueba diferentes tipos de datos y observa c√≥mo se comportan.

Lee documentaci√≥n: Familiar√≠zate con la documentaci√≥n oficial de Python, especialmente con las clases y sus m√©todos.